Transform my Handpan Worship app into a mobile-first progressive web app with the best possible mobile experience. Scan the entire app and implement comprehensive mobile optimizations:

1. Mobile-First Interface & UX
Analyze and optimize all touch interactions for the handpan interface (tap targets, gesture responsiveness, haptic-like feedback)
Review navigation and ensure it works seamlessly with thumb-reachability on phones
Optimize button sizes and spacing for touch (minimum 44x44px tap targets)
Ensure all controls (sliders, toggles, buttons) are mobile-friendly and easy to use with one hand
Add smooth scroll behaviors and momentum scrolling where appropriate
Implement pull-to-refresh if beneficial
2. Mobile Performance Optimization
Analyze bundle size and implement code splitting for faster initial load on mobile networks
Optimize or lazy-load the Spline 3D backgrounds for mobile devices (consider lower-quality versions or delayed loading)
Implement image optimization (WebP format, responsive images, lazy loading)
Reduce JavaScript execution time and minimize main thread blocking
Add resource hints (preload, prefetch, dns-prefetch) for critical assets
Measure and optimize for Core Web Vitals (LCP, FID, CLS) on mobile
3. Progressive Web App (PWA) Features
Add a web app manifest so users can install the app to their home screen
Create app icons in all required sizes (192x192, 512x512, etc.)
Implement a service worker for offline functionality and faster repeat visits
Add a splash screen for when launching from home screen
Enable "Add to Home Screen" prompts on supported browsers
Cache critical assets for offline use (at minimum, the handpan interface should work offline)
4. Mobile Audio Excellence
Verify Web Audio API works flawlessly on iOS Safari, Chrome Android, and other mobile browsers
Optimize audio initialization to feel instant after first tap
Ensure no audio latency or delays when playing handpan notes on mobile
Add visual feedback that confirms audio is ready/active
Handle mobile-specific audio restrictions (locked orientation, background audio, etc.)
Test and optimize for low-latency playback
5. Mobile Network & Loading Optimization
Implement skeleton screens or content placeholders during loading
Add a beautiful loading state for first paint
Optimize for 3G/4G networks (compress assets, minimize requests)
Implement progressive enhancement (core features work immediately, enhancements load after)
Show loading progress for the Spline backgrounds
Defer non-critical resources
6. Responsive Design (Mobile-First, Desktop-Adaptive)
Ensure perfect rendering on all mobile screen sizes (iPhone SE to iPhone 15 Pro Max, Android phones/tablets)
Optimize layouts for portrait orientation (primary) with landscape support
Make the handpan interface scale beautifully across all screen sizes
Ensure text is readable without zooming
Test and optimize for notches, safe areas, and different aspect ratios
Desktop should feel like an enhanced version, not a separate experience
7. Mobile Browser Compatibility
Test and fix issues across Safari iOS, Chrome Android, Samsung Internet, Firefox Mobile
Handle viewport quirks (iOS Safari address bar, Android navigation)
Ensure proper behavior with mobile browser gestures (back swipe, pull-to-refresh)
Fix any CSS that doesn't work on mobile browsers
Test on actual mobile devices, not just emulators
8. Mobile-Specific Features
Add share functionality (Web Share API) to share songs or the app
Consider adding install prompts when appropriate
Optimize for battery life (efficient animations, minimal background activity)
Handle orientation changes gracefully
Support dark mode based on system preferences
Add visual feedback for all interactions (no confusion about what was tapped)
9. Performance Monitoring
Add performance metrics tracking for mobile users
Identify and fix any performance bottlenecks specific to mobile
Monitor bundle sizes and set budgets
Track real-world mobile performance
After scanning, create a prioritized action plan and implement the most critical mobile optimizations first. The goal: A buttery-smooth, fast, installable mobile web app that feels like a native app but works everywhere.